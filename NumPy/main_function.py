import numpy as np

# a = np.array([1, 2, 3, 4], 'float64')
# for el in a:
#     print(el)

#print(np.sctypeDict)  все типы данных, которые поддерживает numpy

# print(np.array('hello')) #если в массив передать просто строку,
#то это будет массив из одного элемента, а не массив из символов строки

#двумерный массив

# matrix = np.array([[1, 2], [3, 4], [5, 6]])
# # print(a)

# for row in matrix:
#     for el in row:
#         print(el)

#массив из 10 нулей
# print(np.array([0]*10))

#Функция empty  создаёт массив заданного размера и типа данных
# но без определённых значений
# print(np.empty((3, 2), dtype ='int16'))

#Функция eye() создаёт единичную матрицу заданной размерности
# print(np.eye(4,5))

#или если строго квадратную единичную матрицу
# print(np.identity(4))

#массив из нулей
# print(np.zeros((2,5,2)))

#массив из всех единиц
# print(np.ones((4,4)))

#массивиз заданных значений
# print(np.full((3,2), 13))

# функция asmatrix() создаёт матрицу из строки , или списка
# print(np.asmatrix('1 2 3 4')) #создаёт матрицу 1*4 из строки`

# print(np.diag([1, 12, 34, 7])) #список с элементами по диагонали матрицы

# tri() создаёт нижнетругольную матрицу
# 
# print(np.tri(5))

# print(np.tri(3,2))

# tril() делает из заданной матрицы нижнетреугольную (заменяет на ноль эл над диагональю)
# a = np.array([(1,2,3), (4,5,6), (7,8,9)])
# print(a)
# print(np.tril(a))
#triu() - верхнетреугольную
# print(np.triu(a))

#матрица Вандермонда
# print(np.vander([1,2,3,4], increasing= True))

# Функция arange() создаёт массив пр указанному диапазону 
# print(np.arange(5)) #[0 1 2 3 4] короче как range()

a = [[1, 3], [2, 4]]
b = [[5, 6], [7, 8]]
print(a)
print(np.dot(a, b))